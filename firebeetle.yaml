esphome:
  name: firebeetle-humidity
  includes:
    - BleDistance/lib/OneEuro.h
    - BleDistance/ble_dist.h
  on_boot:
    then:
      lambda: |-
        addTracker("phone", "d712bd8b-7830-4ad9-92d4-ea8e30719526");

uart:
  rx_pin: RX
  tx_pin: TX
  baud_rate: 9600

esp32:
  board: firebeetle32
  framework:
    type: arduino
        
# Enable logging
logger:
  level: warn
  baud_rate: 0  # no logging to uart 

# Enable Home Assistant API
api:
  reboot_timeout: 60min

ota:
  password: "7a490f882db80619566ca73d003579cf"

esp32_ble_tracker:
  scan_parameters:
    duration: 60s
    active: false
  on_ble_advertise:
    then:
      - lambda: |-
          parseAdvertisement(x);
          
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Firebeetle-Humidity"
    password: "TzZW1Z3JC0cW"
  # manual_ip:
  #   # Set this to the IP of the ESP. router should not lease IP's above 150
  #   static_ip: 192.168.2.121
  #   # Set this to the IP address of the router. Often ends with .1
  #   gateway: 192.168.2.254
  #   # The subnet of the network. 255.255.255.0 works for most home networks.
  #   subnet: 255.255.255.0

captive_portal:

sensor:
  - platform: senseair
    co2:
      name: "SenseAir CO2 Value"
    update_interval: 60s

  # - platform: template
  #   name: "Phone Distance"
  #   id: phone_dist
  #   update_interval: 30s
  #   unit_of_measurement: "m"
  #   device_class: ""
  #   state_class: "measurement"
  #   accuracy_decimals: 2
  #   entity_category: "diagnostic"
  #   lambda: |-
  #     return getTracker("phone").get_dist();
      
  - platform: uptime
    name: "Firebeetle uptime Sensor"

  - platform: wifi_signal
    name: "Firebeetle WiFi Signal"
    update_interval: 60s

  - platform: pvvx_mithermometer
    mac_address: A4:C1:38:33:B8:6F
    temperature:
      name: "Mi Temperature 1"
    humidity:
      name: "Mi Humidity 1"
    battery_level:
      name: "Mi Battery Level 1"
  - platform: pvvx_mithermometer
    mac_address: A4:C1:38:35:9A:CA
    temperature:
      name: "Mi Temperature 2"
    humidity:
      name: "Mi Humidity 2"
    battery_level:
      name: "Mi Battery Level 2"
  - platform: pvvx_mithermometer
    mac_address: A4:C1:38:38:57:36
    temperature:
      name: "Mi Temperature 3"
    humidity:
      name: "Mi Humidity 3"
    battery_level:
      name: "Mi Battery Level 3"
  - platform: pvvx_mithermometer
    mac_address: A4:C1:38:0E:09:4D
    temperature:
      name: "Mi Temperature 4"
    humidity:
      name: "Mi Humidity 4"
    battery_level:
      name: "Mi Battery Level 4"
  - platform: pvvx_mithermometer
    mac_address: A4:C1:38:0B:17:B9
    temperature:
      name: "Mi Temperature 5"
    humidity:
      name: "Mi Humidity 5"
    battery_level:
      name: "Mi Battery Level 5"
  - platform: pvvx_mithermometer  # Studeerkamer
    mac_address: A4:C1:38:FD:3C:03
    temperature:
      name: "Mi Temperature 6"
      id: mi_6_temperature
    humidity:
      name: "Mi Humidity 6"
      id: mi_6_humidity
    battery_level:
      name: "Mi Battery Level 6"
  - platform: pvvx_mithermometer
    mac_address: A4:C1:38:9B:DB:F6
    temperature:
      name: "Mi Temperature 7"
    humidity:
      name: "Mi Humidity 7"
    battery_level:
      name: "Mi Battery Level 7"
  - platform: pvvx_mithermometer
    mac_address: A4:C1:38:72:BD:D5
    temperature:
      name: "Mi Temperature 8"
    humidity:
      name: "Mi Humidity 8"
    battery_level:
      name: "Mi Battery Level 8"
#   - platform: dht
#     pin: 25
#     temperature:
#       name: "Living Room Temperature"
#     humidity:
#       name: "Living Room Humidity"
#     update_interval: 1s
  # - platform: adc
  #   pin: A0
  #   name: "Multisensor Brightness"
  #   unit_of_measurement: lux
  #   filters:
  #     - lambda: |-
  #         return (x / 10000.0) * 2000000.0;
  #   update_interval: 1s

  # - platform: adc
  #   pin: A0
  #   name: "Gas ADC"
  #   update_interval: 1s
  #   filters:
  #     - multiply: 3.3 # for NodeMcu ESP8266 v3 Lua
  #   accuracy_decimals: 4
  #   unit_of_measurement: V
  #   id: sensor_volt  
    
  # - platform: template
  #   #Linearization of the temperature dependency curve under and above 20 degree C
  #   #below 20degC: fact = a * t * t - b * t - (h - 33) * d
  #   #above 20degC: fact = a * t + b * h + c
  #   #this assumes a linear dependency on humidity
  #   #getCorrectionFactor
  #   name: "Correction Factor"
  #   lambda: |-
  #     if (id(mi_6_temperature).state<20) {
  #       return (id(CORA) * id(mi_6_temperature).state * id(mi_6_temperature).state - id(CORB) *
  #         id(mi_6_temperature).state + id(CORC) - (id(mi_6_humidity).state - 33.) * id(CORD));
  #     } else {
  #       return (id(CORE) * id(mi_6_temperature).state + id(CORF) * id(mi_6_humidity).state + id(CORG));
  #     }
  #   update_interval: 10s
  #   accuracy_decimals: 6
  #   id: correction_factor

  # - platform: template
  #   #Get the resistance of the sensor, ie. the measurement value @return The sensor resistance in kOhm
  #   # RS = [(VC x RL) / VRL] - RL
  #   # RS_air = ((5.14*1.0)/sensor_volt)-1.0 Calculate RS in fresh air 
  #   #getResistance
  #   name: "Resistance"
  #   lambda: |-
  #     return ((id(volt_resolution)*id(RLOAD)/id(sensor_volt).state) - id(RLOAD));
  #   update_interval: 5s
  #   accuracy_decimals: 3
  #   unit_of_measurement: kOm
  #   id: resistance
    
  # - platform: template
  #   # Get the resistance of the sensor, ie. the measurement value correctedfor temp/hum @return The corrected sensor resistance kOhm
  #   #getCorrectedResistance
  #   name: "Corrected Resistance"
  #   lambda: |-
  #     return (id(resistance).state / id(correction_factor).state);
  #   update_interval: 5s
  #   accuracy_decimals: 3
  #   unit_of_measurement: kOm
  #   id: corrected_resistance

  # - platform: template
  #   # Get the ppm of CO2 sensed (assuming only CO2 in the air). The ppm of CO2 in the air
  #   #getPPM
  #   name: "PPM CO2"
  #   lambda: |-
  #     if (id(regression_method)==1) {
  #       return (id(PARA) * pow((id(resistance).state / id(RZERO)), id(PARB)));
  #     } else {
  #       return (pow(10, (log10(id(resistance).state / id(RZERO)) - id(PARB)) / id(PARA)));
  #     }
  #   update_interval: 5s
  #   unit_of_measurement: ppm
  #   id: ppm_co2

  # - platform: template
  #   # Get the ppm of CO2 sensed (assuming only CO2 in the air), corrected  for temp. The ppm of CO2 in the air
  #   #getCorrectedPPM
  #   name: "Corrected PPM CO2"
  #   lambda: |-
  #     if (id(regression_method)==1) {
  #       return (id(PARA) * pow((id(corrected_resistance).state / id(RZERO)), id(PARB)));
  #     } else {
  #       return (pow(10, (log10(id(corrected_resistance).state / id(RZERO)) - id(PARB)) / id(PARA)));
  #     }
  #   update_interval: 5s
  #   unit_of_measurement: ppm
  #   id: corrected_ppm_co2

  # - platform: template
  #   # Get the resistance RZero of the sensor for calibration purposes. The sensor resistance RZero in kOhm
  #   #getRZero
  #   name: "RZero"
  #   lambda: |-
  #     return (id(resistance).state / pow((id(ATMOCO2) / id(PARA)), (1./id(PARB))));
  #   filters:
  #     - sliding_window_moving_average:
  #         window_size: 15
  #         send_every: 1
  #   update_interval: 5s
  #   accuracy_decimals: 3
  #   unit_of_measurement: kOm
  #   id: r_zero

  # - platform: template
  #   # Get the corrected resistance RZero of the sensor for calibration purposes. The corrected sensor resistance RZERO in kOhm for ATMOCO2 level
  #   #getCorrectedRZero
  #   name: "CorrectedRZero"
  #   lambda: |-
  #     return (id(corrected_resistance).state / pow((id(ATMOCO2) / id(PARA)), (1./id(PARB))));
  #   filters:
  #     - sliding_window_moving_average:
  #         window_size: 15
  #         send_every: 1
  #   update_interval: 5s
  #   accuracy_decimals: 3
  #   unit_of_measurement: kOm
  #   id: corrected_r_zero

time:
  - platform: homeassistant
    on_time:
      - seconds: 0
        minutes: 0
        hours: 4
        days_of_week: MON-SUN
        then:
           - switch.toggle: restart_switch
switch:
  - platform: restart
    name: "test_temperature Restart"
    id: restart_switch




  
# binary_sensor:
#   - platform: gpio
#     pin: 26
#     name: "Multisensor Motion"
#     device_class: motion

# globals:

# #The load resistance on the board. Value in KiloOhms
#   - id: RLOAD
#     type: float
#     restore_value: no
#     initial_value: '1.025'

# #Calibration resistance at atmospheric CO2 level. Outdoor calibration data
#   - id: RZERO
#     type: float
#     restore_value: no
#     initial_value: '35.429'

# #Atmospheric CO2 level for calibration purposes. Outdoor CO2 level during calibration. Usually 450, but it's better to clarify.
#   - id: ATMOCO2
#     type: float
#     restore_value: no
#     initial_value: '450'

# #Parameters for calculating ppm of CO2 from sensor resistance
# #  Exponential regression:
# #  GAS      | a      | b
# #  CO       | 605.18 | -3.937  
# #  Alcohol  | 77.255 | -3.18 
# #  CO2      | 110.47 | -2.862
# #  Tolueno  | 44.947 | -3.445
# #  NH4      | 102.2  | -2.473
# #  Acetona  | 34.668 | -3.369
#   - id: PARA
#     type: float
#     restore_value: no
#     initial_value: '110.47'
#   - id: PARB
#     type: float
#     restore_value: no
#     initial_value: '-2.862'

# #Parameters to model temperature and humidity dependence
#   - id: CORA
#     type: float
#     restore_value: no
#     initial_value: '0.00035'
#   - id: CORB
#     type: float
#     restore_value: no
#     initial_value: '0.02718'
#   - id: CORC
#     type: float
#     restore_value: no
#     initial_value: '1.39538'
#   - id: CORD
#     type: float
#     restore_value: no
#     initial_value: '0.0018'
#   - id: CORE
#     type: float
#     restore_value: no
#     initial_value: '-0.003333333'
#   - id: CORF
#     type: float
#     restore_value: no
#     initial_value: '-0.001923077'
#   - id: CORG
#     type: float
#     restore_value: no
#     initial_value: '1.130128205'

# # Here you need to indicate the supply voltage of the MQ135 sensor. It can be measured with a voltmeter. Please note that the rated power will not always be accurate.
#   - id: volt_resolution
#     type: float
#     restore_value: no
#     initial_value: '4.4'

# # 1 for Exponential, 2 for Linear
#   - id: regression_method
#     type: int
#     restore_value: no
#     initial_value: '1'


